//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/InputMap.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputMap: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputMap()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputMap"",
    ""maps"": [
        {
            ""name"": ""KeyboardAndMouse"",
            ""id"": ""64ca7e7a-59c0-47cf-bffe-505a215bfff1"",
            ""actions"": [
                {
                    ""name"": ""deltaMouse"",
                    ""type"": ""PassThrough"",
                    ""id"": ""98a5bc7f-c483-4c91-b142-0fdd6cdd442b"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LeftMouseClick"",
                    ""type"": ""Button"",
                    ""id"": ""d45c8214-a108-4d3d-be92-877f659a929e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""aa613330-d5e3-44d9-8c0d-6d72febdeca8"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""deltaMouse"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""012660be-f4c7-40bd-826b-8fa14cc0edac"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftMouseClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Gameplay"",
            ""id"": ""b4570aa9-1b77-467d-a59c-a4b6bf059b5f"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""277c9f8b-d070-4bad-9617-83c591e48f4b"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""ViewDirectionDelta"",
                    ""type"": ""Value"",
                    ""id"": ""45535738-630f-4b97-a17d-14846b8f88be"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""5a83c39e-9648-470e-898d-2a9d3057397a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""UseItemPrimaryAction"",
                    ""type"": ""Button"",
                    ""id"": ""9e9785a4-0eba-4a67-bf50-bce512fdd834"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""UseItemSecondaryAction"",
                    ""type"": ""Button"",
                    ""id"": ""71b97ace-af87-4209-b908-861dccaeb933"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PickItem"",
                    ""type"": ""Button"",
                    ""id"": ""a5308507-bf90-4d04-9ecd-7863e7e9a4fe"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""DropItem"",
                    ""type"": ""Button"",
                    ""id"": ""d1a6f71c-e7bb-4bf6-93fb-fadeadd2165a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ItemSelect"",
                    ""type"": ""Value"",
                    ""id"": ""ef0c2d33-3adb-41f3-8856-0dcf229097be"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Reload"",
                    ""type"": ""Button"",
                    ""id"": ""a05cf61c-63d7-4d2c-a15d-66b776e07eb7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""c89fdb4b-0300-4f67-994e-b943f3358c2f"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""207ac744-c7c6-45b1-8038-ce22e0fd9f50"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""00ac1e15-f198-44a8-a7f1-1d8ca7e17458"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""6ce4326f-4179-4154-bef6-df564f33a8a2"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""32fbabad-926b-4b2a-86d0-2b7aed2a4942"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""45d960ea-0530-4752-a42a-3c3709b0fbaf"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ViewDirectionDelta"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0f9baed3-3975-4504-8b90-b46f0e472e0a"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""66f61259-eede-40f7-aa28-f74d57143e30"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UseItemPrimaryAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""83e0a645-dd4f-4b93-aefb-255aac54f12a"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PickItem"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""975a0f8f-b745-46ca-8be7-b1bd64b49364"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DropItem"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b3fdbdc4-b5dd-4307-b0d7-08c3e906d4a4"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UseItemSecondaryAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8831a06c-0f88-4a64-877c-2d6c77c499ef"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ItemSelect"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""be260512-2b06-4dc3-a56d-28c7e9782e24"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": ""Scale(factor=2)"",
                    ""groups"": """",
                    ""action"": ""ItemSelect"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0a9f3bda-01ca-4383-87ce-14e7aa657df2"",
                    ""path"": ""<Keyboard>/3"",
                    ""interactions"": """",
                    ""processors"": ""Scale(factor=3)"",
                    ""groups"": """",
                    ""action"": ""ItemSelect"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3ca9b843-f3a2-4024-ab5e-b669f85f7466"",
                    ""path"": ""<Keyboard>/4"",
                    ""interactions"": """",
                    ""processors"": ""Scale(factor=4)"",
                    ""groups"": """",
                    ""action"": ""ItemSelect"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""75fa4cbe-70bd-49a8-816f-dcab867166ab"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Reload"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // KeyboardAndMouse
        m_KeyboardAndMouse = asset.FindActionMap("KeyboardAndMouse", throwIfNotFound: true);
        m_KeyboardAndMouse_deltaMouse = m_KeyboardAndMouse.FindAction("deltaMouse", throwIfNotFound: true);
        m_KeyboardAndMouse_LeftMouseClick = m_KeyboardAndMouse.FindAction("LeftMouseClick", throwIfNotFound: true);
        // Gameplay
        m_Gameplay = asset.FindActionMap("Gameplay", throwIfNotFound: true);
        m_Gameplay_Movement = m_Gameplay.FindAction("Movement", throwIfNotFound: true);
        m_Gameplay_ViewDirectionDelta = m_Gameplay.FindAction("ViewDirectionDelta", throwIfNotFound: true);
        m_Gameplay_Jump = m_Gameplay.FindAction("Jump", throwIfNotFound: true);
        m_Gameplay_UseItemPrimaryAction = m_Gameplay.FindAction("UseItemPrimaryAction", throwIfNotFound: true);
        m_Gameplay_UseItemSecondaryAction = m_Gameplay.FindAction("UseItemSecondaryAction", throwIfNotFound: true);
        m_Gameplay_PickItem = m_Gameplay.FindAction("PickItem", throwIfNotFound: true);
        m_Gameplay_DropItem = m_Gameplay.FindAction("DropItem", throwIfNotFound: true);
        m_Gameplay_ItemSelect = m_Gameplay.FindAction("ItemSelect", throwIfNotFound: true);
        m_Gameplay_Reload = m_Gameplay.FindAction("Reload", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // KeyboardAndMouse
    private readonly InputActionMap m_KeyboardAndMouse;
    private List<IKeyboardAndMouseActions> m_KeyboardAndMouseActionsCallbackInterfaces = new List<IKeyboardAndMouseActions>();
    private readonly InputAction m_KeyboardAndMouse_deltaMouse;
    private readonly InputAction m_KeyboardAndMouse_LeftMouseClick;
    public struct KeyboardAndMouseActions
    {
        private @InputMap m_Wrapper;
        public KeyboardAndMouseActions(@InputMap wrapper) { m_Wrapper = wrapper; }
        public InputAction @deltaMouse => m_Wrapper.m_KeyboardAndMouse_deltaMouse;
        public InputAction @LeftMouseClick => m_Wrapper.m_KeyboardAndMouse_LeftMouseClick;
        public InputActionMap Get() { return m_Wrapper.m_KeyboardAndMouse; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(KeyboardAndMouseActions set) { return set.Get(); }
        public void AddCallbacks(IKeyboardAndMouseActions instance)
        {
            if (instance == null || m_Wrapper.m_KeyboardAndMouseActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_KeyboardAndMouseActionsCallbackInterfaces.Add(instance);
            @deltaMouse.started += instance.OnDeltaMouse;
            @deltaMouse.performed += instance.OnDeltaMouse;
            @deltaMouse.canceled += instance.OnDeltaMouse;
            @LeftMouseClick.started += instance.OnLeftMouseClick;
            @LeftMouseClick.performed += instance.OnLeftMouseClick;
            @LeftMouseClick.canceled += instance.OnLeftMouseClick;
        }

        private void UnregisterCallbacks(IKeyboardAndMouseActions instance)
        {
            @deltaMouse.started -= instance.OnDeltaMouse;
            @deltaMouse.performed -= instance.OnDeltaMouse;
            @deltaMouse.canceled -= instance.OnDeltaMouse;
            @LeftMouseClick.started -= instance.OnLeftMouseClick;
            @LeftMouseClick.performed -= instance.OnLeftMouseClick;
            @LeftMouseClick.canceled -= instance.OnLeftMouseClick;
        }

        public void RemoveCallbacks(IKeyboardAndMouseActions instance)
        {
            if (m_Wrapper.m_KeyboardAndMouseActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IKeyboardAndMouseActions instance)
        {
            foreach (var item in m_Wrapper.m_KeyboardAndMouseActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_KeyboardAndMouseActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public KeyboardAndMouseActions @KeyboardAndMouse => new KeyboardAndMouseActions(this);

    // Gameplay
    private readonly InputActionMap m_Gameplay;
    private List<IGameplayActions> m_GameplayActionsCallbackInterfaces = new List<IGameplayActions>();
    private readonly InputAction m_Gameplay_Movement;
    private readonly InputAction m_Gameplay_ViewDirectionDelta;
    private readonly InputAction m_Gameplay_Jump;
    private readonly InputAction m_Gameplay_UseItemPrimaryAction;
    private readonly InputAction m_Gameplay_UseItemSecondaryAction;
    private readonly InputAction m_Gameplay_PickItem;
    private readonly InputAction m_Gameplay_DropItem;
    private readonly InputAction m_Gameplay_ItemSelect;
    private readonly InputAction m_Gameplay_Reload;
    public struct GameplayActions
    {
        private @InputMap m_Wrapper;
        public GameplayActions(@InputMap wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_Gameplay_Movement;
        public InputAction @ViewDirectionDelta => m_Wrapper.m_Gameplay_ViewDirectionDelta;
        public InputAction @Jump => m_Wrapper.m_Gameplay_Jump;
        public InputAction @UseItemPrimaryAction => m_Wrapper.m_Gameplay_UseItemPrimaryAction;
        public InputAction @UseItemSecondaryAction => m_Wrapper.m_Gameplay_UseItemSecondaryAction;
        public InputAction @PickItem => m_Wrapper.m_Gameplay_PickItem;
        public InputAction @DropItem => m_Wrapper.m_Gameplay_DropItem;
        public InputAction @ItemSelect => m_Wrapper.m_Gameplay_ItemSelect;
        public InputAction @Reload => m_Wrapper.m_Gameplay_Reload;
        public InputActionMap Get() { return m_Wrapper.m_Gameplay; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GameplayActions set) { return set.Get(); }
        public void AddCallbacks(IGameplayActions instance)
        {
            if (instance == null || m_Wrapper.m_GameplayActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_GameplayActionsCallbackInterfaces.Add(instance);
            @Movement.started += instance.OnMovement;
            @Movement.performed += instance.OnMovement;
            @Movement.canceled += instance.OnMovement;
            @ViewDirectionDelta.started += instance.OnViewDirectionDelta;
            @ViewDirectionDelta.performed += instance.OnViewDirectionDelta;
            @ViewDirectionDelta.canceled += instance.OnViewDirectionDelta;
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
            @UseItemPrimaryAction.started += instance.OnUseItemPrimaryAction;
            @UseItemPrimaryAction.performed += instance.OnUseItemPrimaryAction;
            @UseItemPrimaryAction.canceled += instance.OnUseItemPrimaryAction;
            @UseItemSecondaryAction.started += instance.OnUseItemSecondaryAction;
            @UseItemSecondaryAction.performed += instance.OnUseItemSecondaryAction;
            @UseItemSecondaryAction.canceled += instance.OnUseItemSecondaryAction;
            @PickItem.started += instance.OnPickItem;
            @PickItem.performed += instance.OnPickItem;
            @PickItem.canceled += instance.OnPickItem;
            @DropItem.started += instance.OnDropItem;
            @DropItem.performed += instance.OnDropItem;
            @DropItem.canceled += instance.OnDropItem;
            @ItemSelect.started += instance.OnItemSelect;
            @ItemSelect.performed += instance.OnItemSelect;
            @ItemSelect.canceled += instance.OnItemSelect;
            @Reload.started += instance.OnReload;
            @Reload.performed += instance.OnReload;
            @Reload.canceled += instance.OnReload;
        }

        private void UnregisterCallbacks(IGameplayActions instance)
        {
            @Movement.started -= instance.OnMovement;
            @Movement.performed -= instance.OnMovement;
            @Movement.canceled -= instance.OnMovement;
            @ViewDirectionDelta.started -= instance.OnViewDirectionDelta;
            @ViewDirectionDelta.performed -= instance.OnViewDirectionDelta;
            @ViewDirectionDelta.canceled -= instance.OnViewDirectionDelta;
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
            @UseItemPrimaryAction.started -= instance.OnUseItemPrimaryAction;
            @UseItemPrimaryAction.performed -= instance.OnUseItemPrimaryAction;
            @UseItemPrimaryAction.canceled -= instance.OnUseItemPrimaryAction;
            @UseItemSecondaryAction.started -= instance.OnUseItemSecondaryAction;
            @UseItemSecondaryAction.performed -= instance.OnUseItemSecondaryAction;
            @UseItemSecondaryAction.canceled -= instance.OnUseItemSecondaryAction;
            @PickItem.started -= instance.OnPickItem;
            @PickItem.performed -= instance.OnPickItem;
            @PickItem.canceled -= instance.OnPickItem;
            @DropItem.started -= instance.OnDropItem;
            @DropItem.performed -= instance.OnDropItem;
            @DropItem.canceled -= instance.OnDropItem;
            @ItemSelect.started -= instance.OnItemSelect;
            @ItemSelect.performed -= instance.OnItemSelect;
            @ItemSelect.canceled -= instance.OnItemSelect;
            @Reload.started -= instance.OnReload;
            @Reload.performed -= instance.OnReload;
            @Reload.canceled -= instance.OnReload;
        }

        public void RemoveCallbacks(IGameplayActions instance)
        {
            if (m_Wrapper.m_GameplayActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IGameplayActions instance)
        {
            foreach (var item in m_Wrapper.m_GameplayActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_GameplayActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public GameplayActions @Gameplay => new GameplayActions(this);
    public interface IKeyboardAndMouseActions
    {
        void OnDeltaMouse(InputAction.CallbackContext context);
        void OnLeftMouseClick(InputAction.CallbackContext context);
    }
    public interface IGameplayActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnViewDirectionDelta(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnUseItemPrimaryAction(InputAction.CallbackContext context);
        void OnUseItemSecondaryAction(InputAction.CallbackContext context);
        void OnPickItem(InputAction.CallbackContext context);
        void OnDropItem(InputAction.CallbackContext context);
        void OnItemSelect(InputAction.CallbackContext context);
        void OnReload(InputAction.CallbackContext context);
    }
}
